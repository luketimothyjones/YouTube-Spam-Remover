/* @license ISC
ISC License

Copyright (c) 2019, Mapbox

Permission to use, copy, modify, and/or distribute this software for any purpose
with or without fee is hereby granted, provided that the above copyright notice
and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
THIS SOFTWARE.
*/
"use strict";
const defaultOptions={threshold:.1,includeAA:!1,alpha:.1,aaColor:[255,255,0],diffColor:[255,0,0],diffColorAlt:null,diffMask:!1,diffMax:null};
function pixelmatch(t,e,n,r,i,a){if(!isPixelData(t)||!isPixelData(e)||n&&!isPixelData(n))throw new Error("Image data: Uint8Array, Uint8ClampedArray or Buffer expected.");if(t.length!==e.length||n&&n.length!==t.length)throw new Error("Image sizes do not match.");if(t.length!==r*i*4)throw new Error("Image data size does not match width/height.");a=Object.assign({},defaultOptions,a);const l=r*i,f=new Uint32Array(t.buffer,t.byteOffset,l),o=new Uint32Array(e.buffer,e.byteOffset,l);let s=!0;for(let t=0;t<l;t++)if(f[t]!==o[t]){s=!1;break}if(s){if(n&&!a.diffMask)for(let e=0;e<l;e++)drawGrayPixel(t,4*e,a.alpha,n);return 0}const d=35215*a.threshold*a.threshold;let u=0;for(let l=0;l<i;l++)for(let f=0;f<r;f++){const o=4*(l*r+f),s=colorDelta(t,e,o,o);if(Math.abs(s)>d)if(a.includeAA||!antialiased(t,f,l,r,i,e)&&!antialiased(e,f,l,r,i,t)){if(n&&drawPixel(n,o,...s<0&&a.diffColorAlt||a.diffColor),u++,null!==a.diffMax&&u>a.diffMax)return u}else n&&!a.diffMask&&drawPixel(n,o,...a.aaColor);else n&&(a.diffMask||drawGrayPixel(t,o,a.alpha,n))}return u}function isPixelData(t){return ArrayBuffer.isView(t)&&1===t.constructor.BYTES_PER_ELEMENT}function antialiased(t,e,n,r,i,a){const l=Math.max(e-1,0),f=Math.max(n-1,0),o=Math.min(e+1,r-1),s=Math.min(n+1,i-1),d=4*(n*r+e);let u,c,h,b,g=e===l||e===o||n===f||n===s?1:0,x=0,M=0;for(let i=l;i<=o;i++)for(let a=f;a<=s;a++){if(i===e&&a===n)continue;const l=colorDelta(t,t,d,4*(a*r+i),!0);if(0===l){if(g++,g>2)return!1}else l<x?(x=l,u=i,c=a):l>M&&(M=l,h=i,b=a)}return 0!==x&&0!==M&&(hasManySiblings(t,u,c,r,i)&&hasManySiblings(a,u,c,r,i)||hasManySiblings(t,h,b,r,i)&&hasManySiblings(a,h,b,r,i))}function hasManySiblings(t,e,n,r,i){const a=Math.max(e-1,0),l=Math.max(n-1,0),f=Math.min(e+1,r-1),o=Math.min(n+1,i-1),s=4*(n*r+e);let d=e===a||e===f||n===l||n===o?1:0;for(let i=a;i<=f;i++)for(let a=l;a<=o;a++){if(i===e&&a===n)continue;const l=4*(a*r+i);if(t[s]===t[l]&&t[s+1]===t[l+1]&&t[s+2]===t[l+2]&&t[s+3]===t[l+3]&&d++,d>2)return!0}return!1}function colorDelta(t,e,n,r,i){let a=t[n+0],l=t[n+1],f=t[n+2],o=t[n+3],s=e[r+0],d=e[r+1],u=e[r+2],c=e[r+3];if(o===c&&a===s&&l===d&&f===u)return 0;o<255&&(o/=255,a=blend(a,o),l=blend(l,o),f=blend(f,o)),c<255&&(c/=255,s=blend(s,c),d=blend(d,c),u=blend(u,c));const h=rgb2y(a,l,f),b=rgb2y(s,d,u),g=h-b;if(i)return g;const x=rgb2i(a,l,f)-rgb2i(s,d,u),M=rgb2q(a,l,f)-rgb2q(s,d,u),y=.5053*g*g+.299*x*x+.1957*M*M;return h>b?-y:y}function rgb2y(t,e,n){return.29889531*t+.58662247*e+.11448223*n}function rgb2i(t,e,n){return.59597799*t-.2741761*e-.32180189*n}function rgb2q(t,e,n){return.21147017*t-.52261711*e+.31114694*n}function blend(t,e){return 255+(t-255)*e}function drawPixel(t,e,n,r,i){t[e+0]=n,t[e+1]=r,t[e+2]=i,t[e+3]=255}function drawGrayPixel(t,e,n,r){const i=blend(rgb2y(t[e+0],t[e+1],t[e+2]),n*t[e+3]/255);drawPixel(r,e,i,i,i)}